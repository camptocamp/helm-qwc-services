---
# Source: qwc/charts/qgis/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: qwc-qgis-qgis-server
  labels:
    helm.sh/chart: qgis
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qgis
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: qgis-server
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: qgis
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: qgis-server
---
# Source: qwc/charts/qwc/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: qwc-qwc-admin-gui
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: admin-gui
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: admin-gui
---
# Source: qwc/charts/qwc/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: qwc-qwc-auth-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: auth-service
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: auth-service
---
# Source: qwc/charts/qwc/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: qwc-qwc-config-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: config-service
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: config-service
---
# Source: qwc/charts/qwc/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: qwc-qwc-data-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: data-service
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: data-service
---
# Source: qwc/charts/qwc/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: qwc-qwc-document-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: document-service
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: document-service
---
# Source: qwc/charts/qwc/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: qwc-qwc-elevation-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: elevation-service
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: elevation-service
---
# Source: qwc/charts/qwc/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: qwc-qwc-feature-info-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: feature-info-service
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: feature-info-service
---
# Source: qwc/charts/qwc/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: qwc-qwc-fulltext-search-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: fulltext-search-service
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: fulltext-search-service
---
# Source: qwc/charts/qwc/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: qwc-qwc-legend-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: legend-service
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: legend-service
---
# Source: qwc/charts/qwc/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: qwc-qwc-map-viewer
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: map-viewer
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: map-viewer
---
# Source: qwc/charts/qwc/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: qwc-qwc-mapinfo-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: mapinfo-service
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: mapinfo-service
---
# Source: qwc/charts/qwc/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: qwc-qwc-ogc-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: ogc-service
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: ogc-service
---
# Source: qwc/charts/qwc/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: qwc-qwc-permalink-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: permalink-service
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: permalink-service
---
# Source: qwc/charts/qwc/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: qwc-qwc-print-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: print-service
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: print-service
---
# Source: qwc/charts/qwc/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: qwc-qwc-solr
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: solr
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: solr
---
# Source: qwc/charts/qgis/templates/secret-docker-registry.yaml
apiVersion: v1
kind: Secret
metadata:
  name: qwc-qgis-dockerregistry
  labels:
    helm.sh/chart: qgis
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qgis
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: dockerregistry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: ewogICJhdXRocyI6IHsKICAgICJmaXgtZW5kLWNvbW1hIjogeyJhdXRoIjogIiJ9CiAgfQp9
---
# Source: qwc/charts/qwc/templates/secret-docker-registry.yaml
apiVersion: v1
kind: Secret
metadata:
  name: qwc-qwc-dockerregistry
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: dockerregistry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: ewogICJhdXRocyI6IHsKICAgICJmaXgtZW5kLWNvbW1hIjogeyJhdXRoIjogIiJ9CiAgfQp9
---
# Source: qwc/templates/jwt-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "jwt-key-secret"
  annotations:
    "helm.sh/resource-policy": "keep"
type: Opaque
data:
  # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
  # set $jwtSecret to existing secret data or generate a random one when not exists
  # generate 32 chars long random string, base64 encode it and then double-quote the result string.
  JWT_SECRET_KEY: "ZXhhbXBsZS1qd3Qta2V5LXNlY3JldA=="
---
# Source: qwc/templates/pg-conf-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: pg-service-conf-secret
  namespace: default
type: Opaque
data:
  pg_service_conf: W3F3Y19jb25maWdkYl0KaG9zdD1xd2MtcG9zdGdpcwpwb3J0PTU0MzIKZGJuYW1lPXF3Y19kZW1vCnVzZXI9cXdjX2FkbWluCnBhc3N3b3JkPXF3Y19hZG1pbgpzc2xtb2RlPWRpc2FibGUKCltxd2NfZ2VvZGJdCmhvc3Q9cXdjLXBvc3RnaXMKcG9ydD01NDMyCmRibmFtZT1xd2NfZGVtbwp1c2VyPXF3Y19zZXJ2aWNlCnBhc3N3b3JkPXF3Y19zZXJ2aWNlCnNzbG1vZGU9ZGlzYWJsZQoKW3F3Y19nZW9kYl0KaG9zdD1xd2MtcG9zdGdpcwpwb3J0PTU0MzIKZGJuYW1lPXF3Y19kZW1vCnVzZXI9cXdjX3NlcnZpY2Vfd3JpdGUKcGFzc3dvcmQ9cXdjX3NlcnZpY2Vfd3JpdGUKc3NsbW9kZT1kaXNhYmxl
---
# Source: qwc/charts/qgis/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: qwc-qgis-server
  labels:
    helm.sh/chart: qgis
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qgis
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: qgis-server
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: qgis
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: qgis-server
---
# Source: qwc/charts/qwc/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: qwc-qwc-admin-gui
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: admin-gui
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9090
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: admin-gui
---
# Source: qwc/charts/qwc/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: qwc-qwc-auth-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: auth-service
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9090
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: auth-service
---
# Source: qwc/charts/qwc/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: qwc-qwc-config-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: config-service
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9090
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: config-service
---
# Source: qwc/charts/qwc/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: qwc-qwc-data-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: data-service
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9090
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: data-service
---
# Source: qwc/charts/qwc/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: qwc-qwc-document-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: document-service
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9090
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: document-service
---
# Source: qwc/charts/qwc/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: qwc-qwc-elevation-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: elevation-service
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9090
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: elevation-service
---
# Source: qwc/charts/qwc/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: qwc-qwc-feature-info-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: feature-info-service
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9090
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: feature-info-service
---
# Source: qwc/charts/qwc/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: qwc-qwc-fulltext-search-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: fulltext-search-service
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9090
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: fulltext-search-service
---
# Source: qwc/charts/qwc/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: qwc-qwc-legend-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: legend-service
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9090
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: legend-service
---
# Source: qwc/charts/qwc/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: qwc-qwc-map-viewer
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: map-viewer
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9090
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: map-viewer
---
# Source: qwc/charts/qwc/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: qwc-qwc-mapinfo-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: mapinfo-service
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9090
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: mapinfo-service
---
# Source: qwc/charts/qwc/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: qwc-qwc-ogc-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: ogc-service
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9090
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: ogc-service
---
# Source: qwc/charts/qwc/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: qwc-qwc-permalink-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: permalink-service
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9090
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: permalink-service
---
# Source: qwc/charts/qwc/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: qwc-qwc-print-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: print-service
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9090
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: print-service
---
# Source: qwc/charts/qwc/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: qwc-qwc-solr
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: solr
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8983
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: solr
---
# Source: qwc/charts/qgis/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qwc-qgis-qgis-server
  labels:
    helm.sh/chart: qgis
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qgis
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: qgis-server
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: qgis
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: qgis-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qgis
        app.kubernetes.io/instance: qwc
        app.kubernetes.io/component: qgis-server
    spec:
      imagePullSecrets:
        - name: qwc-qgis-docker-registry
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: qgis
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "sourcepole/qwc-qgis-server:3.38"
          imagePullPolicy: IfNotPresent
          env:
            - name: "JWT_COOKIE_CSRF_PROTECT"
              value: "False"
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
            - name: "PORT"
              value: "8080"
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /data
              name: v-qwc-data
              readOnly: true
              subPath: qgs-resources

          ports:
            - name: http
              containerPort: 8080


      volumes:
        - name: pg-service-conf-secret
          secret:
            secretName: pg-service-conf-secret
            items:
            - key: pg_service_conf
              path: pg_service.conf
---
# Source: qwc/charts/qwc/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qwc-qwc-admin-gui
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: admin-gui
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: admin-gui
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qwc
        app.kubernetes.io/instance: qwc
        app.kubernetes.io/component: admin-gui
    spec:
      imagePullSecrets:
        - name: qwc-qwc-docker-registry
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: uwsgi
          securityContext:
            {}
          image: "sourcepole/qwc-admin-gui:v2024.6-lts"
          imagePullPolicy: IfNotPresent
          env:
            - name: "DEFAULT_LOCALE"
              value: en
            - name: "GROUP_REGISTRATION_ENABLED"
              value: "False"
            - name: "IDLE_TIMEOUT"
              value: "600"
            - name: "JWT_COOKIE_CSRF_PROTECT"
              value: "False"
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
            - name: "MAIL_DEFAULT_SENDER"
              value: from@example.com
            - name: "MAIL_SUPPRESS_SEND"
              value: "True"
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /srv/pg_service.conf
              name: pg-service-conf-secret
              readOnly: true
              subPath: pg_service.conf
            - mountPath: /srv/qwc_service/config
              name: v-qwc-data
              subPath: config

          ports:
            - name: http
              containerPort: 9090
              hostIP: 127.0.0.1


      volumes:
        - name: pg-service-conf-secret
          secret:
            secretName: pg-service-conf-secret
            items:
            - key: pg_service_conf
              path: pg_service.conf
---
# Source: qwc/charts/qwc/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qwc-qwc-auth-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: auth-service
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: auth-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qwc
        app.kubernetes.io/instance: qwc
        app.kubernetes.io/component: auth-service
    spec:
      imagePullSecrets:
        - name: qwc-qwc-docker-registry
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: uwsgi
          securityContext:
            {}
          image: "sourcepole/qwc-db-auth:v2024.4-lts"
          imagePullPolicy: IfNotPresent
          env:
            - name: "JWT_COOKIE_CSRF_PROTECT"
              value: "False"
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
            - name: "MAIL_DEFAULT_SENDER"
              value: from@example.com
            - name: "MAIL_SUPPRESS_SEND"
              value: "True"
            - name: "SERVICE_MOUNTPOINT"
              value: /auth
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /srv/pg_service.conf
              name: pg-service-conf-secret
              readOnly: true
              subPath: pg_service.conf
            - mountPath: /srv/qwc_service/config
              name: v-qwc-data
              subPath: config

          ports:
            - name: http
              containerPort: 9090
              hostIP: 127.0.0.1


      volumes:
        - name: pg-service-conf-secret
          secret:
            secretName: pg-service-conf-secret
            items:
            - key: pg_service_conf
              path: pg_service.conf
---
# Source: qwc/charts/qwc/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qwc-qwc-config-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: config-service
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: config-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qwc
        app.kubernetes.io/instance: qwc
        app.kubernetes.io/component: config-service
    spec:
      imagePullSecrets:
        - name: qwc-qwc-docker-registry
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: uwsgi
          securityContext:
            {}
          image: "sourcepole/qwc-config-generator:v2024.5-lts"
          imagePullPolicy: IfNotPresent
          env:
            - name: "INPUT_CONFIG_PATH"
              value: /srv/qwc_service/config-in
            - name: "JWT_COOKIE_CSRF_PROTECT"
              value: "False"
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
            - name: "OUTPUT_CONFIG_PATH"
              value: /srv/qwc_service/config-out
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /data
              name: v-qwc-data
              subPath: qgs-resources
            - mountPath: /qwc2
              name: v-qwc-data
              subPath: qwc2
            - mountPath: /srv/pg_service.conf
              name: pg-service-conf-secret
              readOnly: true
              subPath: pg_service.conf
            - mountPath: /srv/qwc_service/config
              name: v-qwc-data
              subPath: config
            - mountPath: /srv/qwc_service/config-in
              name: v-qwc-data
              readOnly: true
              subPath: config-in
            - mountPath: /srv/qwc_service/config-out
              name: v-qwc-data
              subPath: config

          ports:
            - name: http
              containerPort: 9090
              hostIP: 127.0.0.1


      volumes:
        - name: pg-service-conf-secret
          secret:
            secretName: pg-service-conf-secret
            items:
            - key: pg_service_conf
              path: pg_service.conf
---
# Source: qwc/charts/qwc/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qwc-qwc-data-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: data-service
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: data-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qwc
        app.kubernetes.io/instance: qwc
        app.kubernetes.io/component: data-service
    spec:
      imagePullSecrets:
        - name: qwc-qwc-docker-registry
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: uwsgi
          securityContext:
            {}
          image: "sourcepole/qwc-data-service:v2024.4-lts"
          imagePullPolicy: IfNotPresent
          env:
            - name: "JWT_COOKIE_CSRF_PROTECT"
              value: "False"
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
            - name: "SERVICE_MOUNTPOINT"
              value: /api/v1/data
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /attachments
              name: v-qwc-data
              readOnly: true
              subPath: attachments
            - mountPath: /srv/pg_service.conf
              name: pg-service-conf-secret
              readOnly: true
              subPath: pg_service.conf
            - mountPath: /srv/qwc_service/config
              name: v-qwc-data
              subPath: config

          ports:
            - name: http
              containerPort: 9090
              hostIP: 127.0.0.1


      volumes:
        - name: pg-service-conf-secret
          secret:
            secretName: pg-service-conf-secret
            items:
            - key: pg_service_conf
              path: pg_service.conf
---
# Source: qwc/charts/qwc/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qwc-qwc-document-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: document-service
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: document-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qwc
        app.kubernetes.io/instance: qwc
        app.kubernetes.io/component: document-service
    spec:
      imagePullSecrets:
        - name: qwc-qwc-docker-registry
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: uwsgi
          securityContext:
            {}
          image: "sourcepole/qwc-document-service:v2024.2-lts"
          imagePullPolicy: IfNotPresent
          env:
            - name: "JWT_COOKIE_CSRF_PROTECT"
              value: "False"
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
            - name: "SERVICE_MOUNTPOINT"
              value: /api/v1/document
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /srv/pg_service.conf
              name: pg-service-conf-secret
              readOnly: true
              subPath: pg_service.conf
            - mountPath: /srv/qwc_service/config
              name: v-qwc-data
              subPath: config

          ports:
            - name: http
              containerPort: 9090
              hostIP: 127.0.0.1


      volumes:
        - name: pg-service-conf-secret
          secret:
            secretName: pg-service-conf-secret
            items:
            - key: pg_service_conf
              path: pg_service.conf
---
# Source: qwc/charts/qwc/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qwc-qwc-elevation-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: elevation-service
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: elevation-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qwc
        app.kubernetes.io/instance: qwc
        app.kubernetes.io/component: elevation-service
    spec:
      imagePullSecrets:
        - name: qwc-qwc-docker-registry
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: uwsgi
          securityContext:
            {}
          image: "sourcepole/qwc-elevation-service:v2024.2-lts"
          imagePullPolicy: IfNotPresent
          env:
            - name: "JWT_COOKIE_CSRF_PROTECT"
              value: "False"
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /srv/pg_service.conf
              name: pg-service-conf-secret
              readOnly: true
              subPath: pg_service.conf
            - mountPath: /srv/qwc_service/config
              name: v-qwc-data
              subPath: config

          ports:
            - name: http
              containerPort: 9090
              hostIP: 127.0.0.1


      volumes:
        - name: pg-service-conf-secret
          secret:
            secretName: pg-service-conf-secret
            items:
            - key: pg_service_conf
              path: pg_service.conf
---
# Source: qwc/charts/qwc/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qwc-qwc-feature-info-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: feature-info-service
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: feature-info-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qwc
        app.kubernetes.io/instance: qwc
        app.kubernetes.io/component: feature-info-service
    spec:
      imagePullSecrets:
        - name: qwc-qwc-docker-registry
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: uwsgi
          securityContext:
            {}
          image: "sourcepole/qwc-feature-info-service:v2024.08.28"
          imagePullPolicy: IfNotPresent
          env:
            - name: "JWT_COOKIE_CSRF_PROTECT"
              value: "False"
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
            - name: "SERVICE_MOUNTPOINT"
              value: /api/v1/featureinfo
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /srv/pg_service.conf
              name: pg-service-conf-secret
              readOnly: true
              subPath: pg_service.conf
            - mountPath: /srv/qwc_service/config
              name: v-qwc-data
              subPath: config

          ports:
            - name: http
              containerPort: 9090
              hostIP: 127.0.0.1


      volumes:
        - name: pg-service-conf-secret
          secret:
            secretName: pg-service-conf-secret
            items:
            - key: pg_service_conf
              path: pg_service.conf
---
# Source: qwc/charts/qwc/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qwc-qwc-fulltext-search-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: fulltext-search-service
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: fulltext-search-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qwc
        app.kubernetes.io/instance: qwc
        app.kubernetes.io/component: fulltext-search-service
    spec:
      imagePullSecrets:
        - name: qwc-qwc-docker-registry
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: uwsgi
          securityContext:
            {}
          image: "sourcepole/qwc-fulltext-search-service:v2024.3-lts"
          imagePullPolicy: IfNotPresent
          env:
            - name: "JWT_COOKIE_CSRF_PROTECT"
              value: "False"
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
            - name: "SERVICE_MOUNTPOINT"
              value: /api/v2/search
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /srv/pg_service.conf
              name: pg-service-conf-secret
              readOnly: true
              subPath: pg_service.conf
            - mountPath: /srv/qwc_service/config
              name: v-qwc-data
              subPath: config

          ports:
            - name: http
              containerPort: 9090
              hostIP: 127.0.0.1


      volumes:
        - name: pg-service-conf-secret
          secret:
            secretName: pg-service-conf-secret
            items:
            - key: pg_service_conf
              path: pg_service.conf
---
# Source: qwc/charts/qwc/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qwc-qwc-legend-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: legend-service
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: legend-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qwc
        app.kubernetes.io/instance: qwc
        app.kubernetes.io/component: legend-service
    spec:
      imagePullSecrets:
        - name: qwc-qwc-docker-registry
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: uwsgi
          securityContext:
            {}
          image: "sourcepole/qwc-legend-service:v2024.2-lts"
          imagePullPolicy: IfNotPresent
          env:
            - name: "JWT_COOKIE_CSRF_PROTECT"
              value: "False"
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
            - name: "SERVICE_MOUNTPOINT"
              value: /api/v1/legend
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /legends
              name: v-qwc-data
              readOnly: true
              subPath: legends
            - mountPath: /srv/pg_service.conf
              name: pg-service-conf-secret
              readOnly: true
              subPath: pg_service.conf
            - mountPath: /srv/qwc_service/config
              name: v-qwc-data
              subPath: config

          ports:
            - name: http
              containerPort: 9090
              hostIP: 127.0.0.1


      volumes:
        - name: pg-service-conf-secret
          secret:
            secretName: pg-service-conf-secret
            items:
            - key: pg_service_conf
              path: pg_service.conf
---
# Source: qwc/charts/qwc/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qwc-qwc-map-viewer
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: map-viewer
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: map-viewer
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qwc
        app.kubernetes.io/instance: qwc
        app.kubernetes.io/component: map-viewer
    spec:
      imagePullSecrets:
        - name: qwc-qwc-docker-registry
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: uwsgi
          securityContext:
            {}
          image: "sourcepole/qwc-map-viewer-demo:v2024.16-lts"
          imagePullPolicy: IfNotPresent
          env:
            - name: "JWT_COOKIE_CSRF_PROTECT"
              value: "False"
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /srv/pg_service.conf
              name: pg-service-conf-secret
              readOnly: true
              subPath: pg_service.conf
            - mountPath: /srv/qwc_service/config
              name: v-qwc-data
              subPath: config

          ports:
            - name: http
              containerPort: 9090
              hostIP: 127.0.0.1


      volumes:
        - name: pg-service-conf-secret
          secret:
            secretName: pg-service-conf-secret
            items:
            - key: pg_service_conf
              path: pg_service.conf
---
# Source: qwc/charts/qwc/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qwc-qwc-mapinfo-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: mapinfo-service
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: mapinfo-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qwc
        app.kubernetes.io/instance: qwc
        app.kubernetes.io/component: mapinfo-service
    spec:
      imagePullSecrets:
        - name: qwc-qwc-docker-registry
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: uwsgi
          securityContext:
            {}
          image: "sourcepole/qwc-mapinfo-service:v2024.4-lts"
          imagePullPolicy: IfNotPresent
          env:
            - name: "JWT_COOKIE_CSRF_PROTECT"
              value: "False"
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
            - name: "SERVICE_MOUNTPOINT"
              value: /api/v1/mapinfo
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /srv/pg_service.conf
              name: pg-service-conf-secret
              readOnly: true
              subPath: pg_service.conf
            - mountPath: /srv/qwc_service/config
              name: v-qwc-data
              subPath: config

          ports:
            - name: http
              containerPort: 9090
              hostIP: 127.0.0.1


      volumes:
        - name: pg-service-conf-secret
          secret:
            secretName: pg-service-conf-secret
            items:
            - key: pg_service_conf
              path: pg_service.conf
---
# Source: qwc/charts/qwc/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qwc-qwc-ogc-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: ogc-service
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: ogc-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qwc
        app.kubernetes.io/instance: qwc
        app.kubernetes.io/component: ogc-service
    spec:
      imagePullSecrets:
        - name: qwc-qwc-docker-registry
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: uwsgi
          securityContext:
            {}
          image: "sourcepole/qwc-ogc-service:v2024.4-lts"
          imagePullPolicy: IfNotPresent
          env:
            - name: "JWT_COOKIE_CSRF_PROTECT"
              value: "False"
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
            - name: "SERVICE_MOUNTPOINT"
              value: /ows
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /srv/pg_service.conf
              name: pg-service-conf-secret
              readOnly: true
              subPath: pg_service.conf
            - mountPath: /srv/qwc_service/config
              name: v-qwc-data
              subPath: config

          ports:
            - name: http
              containerPort: 9090
              hostIP: 127.0.0.1


      volumes:
        - name: pg-service-conf-secret
          secret:
            secretName: pg-service-conf-secret
            items:
            - key: pg_service_conf
              path: pg_service.conf
---
# Source: qwc/charts/qwc/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qwc-qwc-permalink-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: permalink-service
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: permalink-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qwc
        app.kubernetes.io/instance: qwc
        app.kubernetes.io/component: permalink-service
    spec:
      imagePullSecrets:
        - name: qwc-qwc-docker-registry
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: uwsgi
          securityContext:
            {}
          image: "sourcepole/qwc-permalink-service:v2024.4-lts"
          imagePullPolicy: IfNotPresent
          env:
            - name: "JWT_COOKIE_CSRF_PROTECT"
              value: "False"
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
            - name: "SERVICE_MOUNTPOINT"
              value: /api/v1/permalink
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /srv/pg_service.conf
              name: pg-service-conf-secret
              readOnly: true
              subPath: pg_service.conf
            - mountPath: /srv/qwc_service/config
              name: v-qwc-data
              subPath: config

          ports:
            - name: http
              containerPort: 9090
              hostIP: 127.0.0.1


      volumes:
        - name: pg-service-conf-secret
          secret:
            secretName: pg-service-conf-secret
            items:
            - key: pg_service_conf
              path: pg_service.conf
---
# Source: qwc/charts/qwc/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qwc-qwc-print-service
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: print-service
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: print-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qwc
        app.kubernetes.io/instance: qwc
        app.kubernetes.io/component: print-service
    spec:
      imagePullSecrets:
        - name: qwc-qwc-docker-registry
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: uwsgi
          securityContext:
            {}
          image: "sourcepole/qwc-print-service:v2024.2-lts"
          imagePullPolicy: IfNotPresent
          env:
            - name: "JWT_COOKIE_CSRF_PROTECT"
              value: "False"
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
            - name: "SERVICE_MOUNTPOINT"
              value: /api/v1/print
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /srv/pg_service.conf
              name: pg-service-conf-secret
              readOnly: true
              subPath: pg_service.conf
            - mountPath: /srv/qwc_service/config
              name: v-qwc-data
              subPath: config

          ports:
            - name: http
              containerPort: 9090
              hostIP: 127.0.0.1


      volumes:
        - name: pg-service-conf-secret
          secret:
            secretName: pg-service-conf-secret
            items:
            - key: pg_service_conf
              path: pg_service.conf
---
# Source: qwc/charts/qwc/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qwc-qwc-solr
  labels:
    helm.sh/chart: qwc
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: qwc
    app.kubernetes.io/instance: qwc
    app.kubernetes.io/component: solr
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: qwc
      app.kubernetes.io/instance: qwc
      app.kubernetes.io/component: solr
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qwc
        app.kubernetes.io/instance: qwc
        app.kubernetes.io/component: solr
    spec:
      imagePullSecrets:
        - name: qwc-qwc-docker-registry
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: solr
          securityContext:
            {}
          image: "solr:8.11-slim"
          imagePullPolicy: IfNotPresent
          env:
            - name: "JWT_COOKIE_CSRF_PROTECT"
              value: "False"
            - name: "JWT_SECRET_KEY"
              valueFrom:
                secretKeyRef:
                  name: "jwt-key-secret"
                  key: "JWT_SECRET_KEY"
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /gdi_conf
              name: v-qwc-data
              readOnly: true
              subPath: solr/configsets/gdi/conf
            - mountPath: /srv/pg_service.conf
              name: pg-service-conf-secret
              readOnly: true
              subPath: pg_service.conf
            - mountPath: /srv/qwc_service/config
              name: v-qwc-data
              subPath: config
            - mountPath: /var/solr
              name: v-qwc-data
              subPath: solr

          ports:
            - name: http
              containerPort: 8983
              hostIP: 127.0.0.1


      volumes:
        - name: pg-service-conf-secret
          secret:
            secretName: pg-service-conf-secret
            items:
            - key: pg_service_conf
              path: pg_service.conf
